const Communication = require('../../models/Communication');
const Community = require('../../models/Community');
const Plan = require('../../models/Plan');
const paginateQuery = require('../../utils/paginateQuery');

function isAdminUser(user) {
  return user.roles?.some(r => r.name === 'ADMIN' || r === 'ADMIN');
}

// üî• Fun√ß√£o centralizada para validar limite de conex√µes
async function checkMaxCommunications(communityId) {
  const community = await Community.findById(communityId).populate('plan');

  if (!community) {
    throw { status: 404, message: 'Comunidade n√£o encontrada' };
  }

  if (!community.plan) {
    throw { status: 400, message: 'A comunidade n√£o possui um plano ativo' };
  }

  const activeCount = await Communication.countDocuments({
    communityId,
    active: true
  });

  const maxAllowed = community.plan.maxCommunications;

  if (activeCount >= maxAllowed) {
    throw {
      status: 403,
      message: `Este plano (${community.plan.name}) permite no m√°ximo ${maxAllowed} conex√µes ativas.`
    };
  }

  return community;
}

// üî• Fun√ß√£o para verificar downgrade antes de alterar o plano
async function checkBeforeDowngrade(communityId, newPlanId) {
  const community = await Community.findById(communityId).populate('plan');
  const newPlan = await Plan.findById(newPlanId);

  if (!community) {
    throw { status: 404, message: 'Comunidade n√£o encontrada' };
  }

  if (!newPlan) {
    throw { status: 404, message: 'Plano n√£o encontrado' };
  }

  const currentMax = community.plan?.maxCommunications || 0;
  const newMax = newPlan.maxCommunications;

  if (newMax < currentMax) {
    const activeCount = await Communication.countDocuments({
      communityId,
      active: true
    });

    if (activeCount > newMax) {
      throw {
        status: 403,
        message: `Este plano (${newPlan.name}) permite no m√°ximo ${newMax} conex√µes ativas. Sua comunidade possui atualmente ${activeCount}. Desative ou exclua comunica√ß√µes para prosseguir com o downgrade.`
      };
    }
  }

  return newPlan;
}

// ‚úÖ Criar comunica√ß√£o
async function createCommunication(data, user) {
  const community = await checkMaxCommunications(data.communityId);

  const isOwner = community.createdBy.toString() === user._id.toString();
  const isAdmin = isAdminUser(user);

  if (!isOwner && !isAdmin) {
    throw {
      status: 403,
      message: 'Voc√™ n√£o tem permiss√£o para criar comunica√ß√µes nesta comunidade'
    };
  }

  const communication = await Communication.create({
    ...data,
    createdBy: user._id
  });

  return communication;
}

// ‚úÖ Listar comunica√ß√µes
async function getCommunications(req, user) {
  const baseFilter = {};

  if (req.query.communityId) {
    baseFilter.communityId = req.query.communityId;
  }

  if (!isAdminUser(user)) {
    if (req.query.communityId) {
      const community = await Community.findById(req.query.communityId);
      const isOwner = community?.createdBy.toString() === user._id.toString();

      if (!isOwner) {
        throw {
          status: 403,
          message: 'Voc√™ n√£o tem permiss√£o para ver as comunica√ß√µes desta comunidade'
        };
      }
    } else {
      baseFilter.createdBy = user._id;
    }
  }

  return await paginateQuery(Communication, req, {
    baseFilter,
    populate: [
      {
        path: 'communityId',
        select: 'name description'
      },
      {
        path: 'createdBy',
        select: 'username email -_id'
      }
    ],
    select: '-__v',
    defaultSort: '-createdAt'
  });
}

// ‚úÖ Ativar/Desativar comunica√ß√£o (com prote√ß√£o contra burlar limite)
async function toggleCommunication(id, user) {
  const communication = await Communication.findById(id).populate({
    path: 'communityId',
    populate: { path: 'plan' }
  });

  if (!communication) {
    throw { status: 404, message: 'Comunica√ß√£o n√£o encontrada' };
  }

  const isAdmin = isAdminUser(user);
  
  // Se n√£o houver comunidade associada, apenas administradores podem alterar
  if (!communication.communityId) {
    if (!isAdmin) {
      throw {
        status: 403,
        message: 'Apenas administradores podem alterar comunica√ß√µes sem comunidade'
      };
    }
    // N√£o h√° verifica√ß√£o de limite para comunica√ß√µes sem comunidade
  } else {
    // Se houver comunidade, verifica se o usu√°rio √© o propriet√°rio ou admin
    const isOwner = communication.communityId.createdBy.toString() === user._id.toString();
    
    if (!isOwner && !isAdmin) {
      throw {
        status: 403,
        message: 'Voc√™ n√£o tem permiss√£o para alterar essa comunica√ß√£o'
      };
    }
    
    // üî• Verificar limite APENAS ao ativar e apenas para comunica√ß√µes com comunidade
    if (!communication.active) {
      const activeCount = await Communication.countDocuments({
        communityId: communication.communityId._id,
        active: true
      });

      const maxAllowed = communication.communityId.plan?.maxCommunications || 0;

      if (activeCount >= maxAllowed) {
        throw {
          status: 403,
          message: `Este plano (${communication.communityId.plan.name}) permite no m√°ximo ${maxAllowed} conex√µes ativas.`
        };
      }
    }
  }

  communication.active = !communication.active;
  await communication.save();

  return communication;
}

// ‚úÖ Deletar comunica√ß√£o
async function deleteCommunication(id, user) {
  const communication = await Communication.findById(id).populate('communityId');

  if (!communication) {
    throw { status: 404, message: 'Comunica√ß√£o n√£o encontrada' };
  }

  const isAdmin = isAdminUser(user);
  
  // Se n√£o houver comunidade associada, apenas administradores podem excluir
  if (!communication.communityId) {
    if (!isAdmin) {
      throw {
        status: 403,
        message: 'Apenas administradores podem excluir comunica√ß√µes sem comunidade'
      };
    }
  } else {
    // Se houver comunidade, verifica se o usu√°rio √© o propriet√°rio ou admin
    const isOwner = communication.communityId.createdBy.toString() === user._id.toString();
    
    if (!isOwner && !isAdmin) {
      throw {
        status: 403,
        message: 'Voc√™ n√£o tem permiss√£o para excluir essa comunica√ß√£o'
      };
    }
  }

  await communication.deleteOne();

  return { success: true, message: 'Comunica√ß√£o removida com sucesso' };
}

// ‚úÖ Alterar plano (com prote√ß√£o de downgrade)
async function changeCommunityPlan(communityId, newPlanId, user) {
  const community = await Community.findById(communityId).populate('plan');

  if (!community) {
    throw { status: 404, message: 'Comunidade n√£o encontrada' };
  }

  const isOwner = community.createdBy.toString() === user._id.toString();
  const isAdmin = isAdminUser(user);

  if (!isOwner && !isAdmin) {
    throw {
      status: 403,
      message: 'Voc√™ n√£o tem permiss√£o para alterar o plano desta comunidade'
    };
  }

  const newPlan = await checkBeforeDowngrade(communityId, newPlanId);

  community.plan = newPlan._id;
  await community.save();

  return community;
}

module.exports = {
  createCommunication,
  getCommunications,
  toggleCommunication,
  deleteCommunication,
  changeCommunityPlan
};
